Here we will display absurdly large numbers
Instead of writing this: Busy Beaver to the Busy Beaver.....
B
B
(
B
B
(
B
B
(
B
B
(
B
B
(
B
B
.
.
.
.
.
.
.
)
)
)
)
)
{\displaystyle BB(BB(BB(BB(BB(BB.......)))))

}
I will create a new function called: RBB that describes how many Busy Beavers stack on top of eachother.  RBB stands for Repeated Busy Beaver and it's a repeated rayo's function (BB) operation.
Let's take an example:
R
B
B
(
L
1
,
L
2
)
{\displaystyle RBB(L1,L2)

}
The variable "L" means levels.
L1 stands for how many busy beavers are repeated.
L2 stands for the number in the last busy beaver repetition.  It works like this:
R
B
B
(
2
,
n
)
=
B
B
(
B
B
(
n
)
)
{\displaystyle RBB(2,n)= BB(BB(n))

}
R
B
B
(
4
,
2
)
=
B
B
(
B
B
(
B
B
(
B
B
(
2
)
)
)
)
{\displaystyle RBB(4,2) = BB(BB(BB(BB(2))))

}
An absurdly large number is something like this:
R
B
B
(
R
B
B
(
R
B
B
(
100
,
100
)
,
100
)
,
100
)
{\displaystyle RBB(RBB(RBB(100,100),100),100)

}
Another (but smaller) absurdly large number:
R
B
B
(
1919
,
1919
)
{\displaystyle RBB(1919,1919)}
or Beaverplex
Contents
1
Extension 1
2
Extension 2
3
Extension 3
3.1
Extension 3.1
3.2
Extension 3.2
Extension 1
[
]
Instead of using busy beaver just use frantic frog so it's RFF. Frantic Frog is more powerful and can stack
Using this, you can make Frogplex, or
R
F
F
(
1919
,
1919
)
{\displaystyle RFF(1919,1919)}
and this means that 1919 Frantic Frogs that are stacked on eachother.
Extension 2
[
]
L3 : Number of times RFF is stacked on itself.
L4: Number of times L3 is looped
Using this, you can make "frogplexus" or
R
F
F
(
1919
,
1919
,
1919
,
1919
)
{\displaystyle RFF(1919,1919,1919,1919)}
A way to shorten it would be like this:
If all entries are the same number just do
R
F
F
(
1919
[
4
]
)
{\displaystyle RFF(1919[4])}
. Much shorter version of frogplexus.
Extension 3
[
]
One insanely large function would be:
This modifies how many levels "L's" RFF has. Warning: X must: be over 2 and must not be a decimal for the function to work.
ℜ
κ
(
x
)
=
{\displaystyle \Re \kappa(x) = }
R
F
F
(
1919
[
x
]
)
{\displaystyle RFF(1919[x])}
ℜ
κ
(
2
)
=
{\displaystyle \Re \kappa(2) = }
R
F
F
(
1919
,
1919
)
{\displaystyle RFF(1919,1919)}
Frogplex
ℜ
κ
(
4
)
=
{\displaystyle \Re \kappa(4) = }
R
F
F
(
1919
,
1919
,
1919
,
1919
)
{\displaystyle RFF(1919,1919,1919,1919)}
Frogplexus
Everything that has L4 and above shows the number of times the previous "L" has been looped.
Example: L5 shows the number of times L4 is looped.
L6 shows how much L5 is looped and so on.
Impossible to write here numbers related to
ℜ
κ
(
x
)
{\displaystyle \Re \kappa(x)  }
:
ℜ
κ
(
10
100
9
)
{\displaystyle \Re \kappa(10^{100^9})  }
ℜ
κ
(
10000
100000
1000000
1000000
)
{\displaystyle \Re \kappa(10000^{100000^{1000000^{1000000}}})  }
ℜ
κ
(
R
F
F
(
1919
[
4
]
)
)
{\displaystyle \Re \kappa(  RFF(1919[4])   )  }
ℜ
κ
(
ℜ
κ
(
10
100000
)
)
{\displaystyle \Re \kappa(\Re \kappa(10^{100000}))  }
ℜ
κ
(
ℜ
κ
(
ℜ
κ
(
10
10
ℜ
κ
(
10
100
9
)
)
)
)
{\displaystyle \Re\kappa(\Re\kappa(\Re\kappa(10^{10^{\Re\kappa}(10^{100^9})})))  }
(named Frogimus)
Extension 3.1
[
]
Just repeating the
ℜ
κ
(
x
)
{\displaystyle \Re \kappa(x)  }
function on itself can generate enormous, gargantuan numbers, but we can do better...
An extension and abbreviation is written like this:
ℜ
κ
(
10
100
)
[
100
,
000
]
{\displaystyle \Re \kappa(10^{100})[100,000]  }
with there being 100,000 nestations/repetitions of
ℜ
κ
(
10
100
)
{\displaystyle \Re \kappa(10^{100})  }
Extension 3.2
[
]
ℜ
κ
(
10
100
)
[
10
100
,
10
100
]
{\displaystyle \Re \kappa(10^{100})[10^{100},10^{100}]}
: rep, rep,... [X,Y] x rep Y rep ext.
arbitrarily large number of rep -> rep -> rep as Y
nice