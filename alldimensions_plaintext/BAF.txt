"
It's already baffling without the fling.
" -BestNoobReborn
Contents
1
About
2
Examples
3
Sub Function
4
Examples /w Sub Function
5
Sizes of Verses
6
Sub-Function Extension
About
[
]
BAF
, standing for Best's Array Function, is an array
function
made by the
user
known as
BestNoobReborn
(AKA SodafizzIGuess), that can generate insane
numbers
.
For example, BAF can easily generate values such as any of the "Grahals", the "Forcals", and even stuff like the "Suporcals". BAF is usually used to mark the sizes of massive
verses
, such as the
Great Borgers
, the
Lettuce Leaf
and similar size-wise.
[
a
1
,
a
2
]
=
a
1
↑
⋯
↑
⏟
a
2
a
1
{\displaystyle [{a_1}, ~ {a_2}]= {a_1} {\underbrace{ \uparrow \cdots \uparrow}_{a_2}} {a_1}}
[
a
1
,
a
2
,
⋯
1
⏟
b
]
=
[
a
1
,
a
2
,
⋯
a
b
−
1
⏟
b
−
1
]
{\displaystyle [{ \underbrace{{a_1}, ~ {a_2}, ~ \cdots ~ 1}_b}]=[{ \underbrace{{a_1}, ~ {a_2}, ~ \cdots ~ {a_{b-1}}}_{b-1}}]}
[
a
1
,
a
2
,
⋯
a
b
⏟
b
]
=
[
a
1
,
a
2
,
⋯
[
a
1
,
a
2
,
⋯
a
b
−
1
⏟
b
⏟
b
−
1
]
]
{\displaystyle [{ \underbrace{{a_1}, ~ {a_2}, ~ \cdots ~ {a_b}}_b}]=[{ \underbrace{{a_1}, ~ {a_2}, ~ \cdots ~ [{ \underbrace{{a_1}, ~ {a_2}, ~ \cdots ~ {a_b}-1}_b}}_{b-1}}]]}
Examples
[
]
[3, 4] = Grahal
[3, 4, 2] = Graham Grahal
[3, 4, 64] = Graham's Number
[3, 4, 1000000] = Forcal
[3, 4, 1000000, 2] = Force Forcal
[3, 4, 1000000, 1000000] = Suporcal
Sub Function
[
]
The array function has a sub-function for repeated entries, useful for representing much higher nested levels of Forcals in the Grahal hierarchy.
If you put rep
a
1
, a
2
(the two a's being actual values) in an array with this function, it'll be replaced with a
2
entries of a
1
.
Examples /w Sub Function
[
]
[3, 4, rep
1000000, 2
] = Suporcal
[3, 4, rep
1000000, 1000000
] = Terribocal
Sizes of Verses
[
]
The sizes of many verses can be represented with BAF.
The Drums
= [
Oakmegaverses
, Oakmegaverses, ℵ
0
]
Bintexas
= [
Hentexas
, Hentexas, Hentexas]
Sub-Function Extension
[
]
BAFFLIN extension is a wasteland now, and we now use the sub-function extension. This extension extends the rep sub-function, with extra entries and the new mrep sub-function.
[
a
1
,
a
2
,
⋯
r
e
p
b
1
,
b
2
,
b
3
,
⋯
a
c
⏟
c
]
=
[
a
1
,
a
2
,
⋯
r
e
p
b
1
,
[
a
1
,
a
2
,
⋯
r
e
p
b
1
,
b
2
,
b
3
,
⋯
a
c
−
1
⏟
c
]
,
⋯
a
c
⏟
c
]
{\displaystyle [{ \underbrace{{a_1}, ~ {a_2}, ~ \cdots ~ {rep_{b_1, b_2, b_3}}, ~ \cdots ~ {a_c}}_c}] = [{ \underbrace{{a_1}, ~ {a_2}, ~ \cdots ~ {rep_{b_1, [{ \underbrace{{a_1}, ~ {a_2}, ~ \cdots ~ {rep_{b_1, b_2, b_3}}, ~ \cdots ~ {a_c - 1}}_c}]}}, ~ \cdots ~ {a_c}}_c}]}
[3, 4, rep(1000000, 1000000, 2)] = Terribocaior Terribocal
(You can add multiple tri-entry reps in one array, however that will cause mass exponential growth of nested amounts of entries)
(You can also add more entries to the rep in this, with the rules
[#, rep(#, m, n), #] = [#, rep(#, [#, rep(#, m, n-1), #]), #]
and the last rep entry will be removed if it's a 1)
(You can ALSO even nest rep sub-function; this is key in the mrep function)
[#, mrep(1, b, #), #] = [#, rep(mrep(1, b-1, #)), #]
[#, mrep(a, 1, #), #] = [#, rep(#), #]
[#, mrep(a, b, #), #] = [#, mrep(a-1, [#, mrep(a, b-1, #), #], #]