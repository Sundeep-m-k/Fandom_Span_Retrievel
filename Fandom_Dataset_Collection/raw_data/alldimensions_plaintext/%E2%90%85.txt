␅
so the number template exists, but it's pretty lackluster, so have a placeholder block to make up for the lack of data values in this infobox
Value
1␅ (aka (
〽️
,0)-[0]␅)
Properties
It ignores anything (including any number or variable) that descales it from its intended value, including both forcibly and by property.
␅
(or
Infinialpha
) is like a constant... and it could be one, although it isn't a normal constant per se.
Contents
1
Definition
1.1
The process
1.2
First input
1.3
Second input
1.4
Third input
1.4.1
Fifth "true" physical limit
1.4.2
Second true physical limit
1.5
The ␅␅
Definition
[
]
␅
has a convoluted definition, to say the least.
Consider ␅ as a more potential form, (a,b)-[c]␅, where a is the base value, b is the physical limit count to (a,b)-[c] (aka saying that it can't be used beyond a certain point anymore), and c is the complexity level of (a,b)-[c], which determines how impossibly complex it is. It is also the true second physical limit count to (a,b)-[c], as it is technically like those beyond categories, but at a much, MUCH grander scale.
1␅ is equivalent to the value of (〽️,0)-[0]␅, so two different forms (and if you still don't know how to use it, then uhhh idk).
The process
[
]
Let's go through the process on how to use the function properly.
First input
[
]
As 1␅ is equivalent to (〽️,0)-[0]␅, we can assume 2 ␅ is equal to (2〽️,0)-[0]␅. By that, 〽️␅ is equal to (〽️〽️,0)-[0] ␅ or (〽️
2
,0)-[0]␅ or (1␅)␅. Note that I put parentheses around 1␅, because without it, the number would be mind bogglingly large that it would be considered
beyond
the (a,b)-[c]␅ form. Now, we can get to ((〽️,0)-[0]␅,0)-[0]␅, which is basically (1␅)
␅
, which we'll have to put parentheses around for the same reason as before. But eventually, we'll start to run out of ways to utilize the first input, and once that happens (including endless␅ extensions utilizing the first input), we'll have to start utilizing the second input of the number.
Second input
[
]
The second input of the number, (〽️,n)-[0]␅, is the physical limit of the first input. To show you an idea of it, let's assume we have the number ((〽️,0)-[0]␅,0)-[0]␅. If we make it larger, in this case to ((((...,0)-[0]␅,0)-[0]␅,0)-[0]␅,0)-[0]␅ (with endless␅ extensions), it would be below (〽️,1)-[0]␅, as the latter number would be the physical limit to the former. It can also be expressed as 1␅1, where the second 1 is the physical limit number of the form. Note that there isn't a zero for the first input, as it would be outputted as 0 if the first input was a 0. By that, (〽️,2)-[0]␅ would be considered the second physical limit to (n,0)-[0]␅ and the physical limit to (n,1)-[0]␅, which even ((((...,1)-[0]␅,1)-[0]␅,1)-[0]␅,1)-[0]␅ (with endless␅ extensions) cannot reach. (〽️,(〽️,0)-[0]␅)-[0]␅ would be the 1␅th physical limit to (〽️,0)-[0]␅ and so on and so forth. Eventually, we'll reach the same problem the first input had, and that we cannot realistically keep continuing to extend the second input forever. So, like before, we'll have to start utilizing the third and final input of the number in the form presented to us.
Third input
[
]
Things are gonna get complicated from here, so beware.
The third input of the number, (〽️,n)-[0]␅, is the
true
physical limit of the (〽️,n)-[0]␅ form. It is like the second input, but at a scale not presentable to even text itself (nor the mind without shortening it to a reasonable amount). It is in one way, recursive. In another way, it is the impossibility of comprehending such a true physical limit to the number that it becomes one of those ineffable numbers. But, with that out of the way, here's how the third input works.
(〽️,0)-[1]␅ is the first true physical limit to (〽️,n)-[0]␅, and with that comes an extension from itself, turning (〽️,0)-[1]␅ into (〽️,0-0)-[1]␅. Now, how does an extra input work if it isn't directly defined? Let's assume it is like the third input, but it grows "exponentially". Take, for example, (〽️,0-1)-[1]␅. This would be the "true" physical limit to (〽️,n-0)-[1]␅ and would extend the number from (〽️,0-1)-[1]␅ to (〽️,0,...,0-1)-[1]␅ x(〽️,0-0)-[1]␅. Now, there are that many inputs that it'd take FOREVER to write all of them down... right? Fortunately, subtracting the recursiveness by 1 will NOT make it repeat itself
indefinitely
and will eventually come to a stop. There would be so many "physical limits" that it would be a joke. Anyways, let's skip to (〽️,0-2)-[1]␅, where it's the second "true" physical limit to (〽️,0-0)-[1]␅ and the "true" physical limit to (〽️,0-1)-[1]␅, further extending the number from (〽️,0-2)-[1]␅ to (〽️,0,...,0-2)-[1]␅ x(〽️,0,...,0-1)-[1]␅ x(〽️,0-0)-[1]␅, and it gets real long if I were to continue (so I'll stop at the fifth "true" physical limit).
Fifth "true" physical limit
[
]
(〽️,0-5)-[1]␅ is the fifth "true" physical limit to (〽️,0-0)-[1]␅ and the "true" physical limit to (〽️,0-4)-[1]␅, further extending the number from (〽️,0-5)-[1]␅ to (〽️,0,...,0-5)-[1]␅ x(〽️,0,...,0-4)-[1]␅ x(〽️,0,...,0-3)-[1]␅ x(〽️,0,...,0-2)-[1]␅ x(〽️,0-0)-[1]␅.
Second true physical limit
[
]
There is a limit to (〽️,0-n)-[1]␅ (much like the second input), so let's cut to the chase and let's skip to (〽️,0-0)-[2]␅, the second
true
physical limit to (〽️,0)-[0]␅ and the true physical limit to (〽️,0-0)-[1]␅. It, too, can be extended to (〽️,0-0-...-0)-[2]␅ x(〽️,0-0)-[1]␅ with that many "true" physical limits. Now, they're similar to the true physical limit, so they share a common property amongst them, but now it's like SSCG(3), where it skyrockets in value compared to counting from 2 to 3. So, given that, there would be beyond a super-tetrational amount of recursiveness that it is uncountable and literally inaccessible within the (a,b)-[c]␅ form. (〽️,0-0)-[3]␅ is the third true physical limit to (〽️,0-0)-[0]␅ and the true physical limit to (〽️,0-0)-[2]␅, extending to (〽️,0-0-...-0)-[3]␅ x(〽️,0-0-...-0)-[2]␅ x(〽️,0-0)-[1]␅, (〽️,0-0)-[5]␅ is the fifth true physical limit to (〽️,0-0)-[0]␅ and the true physical limit to (〽️,0-0)-[4]␅, extending to (〽️,0-0-...-0)-[5]␅ x(〽️,0-0-...-0)-[4]␅ x(〽️,0-0-...-0)-[3]␅ x(〽️,0-0-...-0)-[2]␅ x(〽️,0-0)-[1]␅, etc. you get the idea.
The third input is the limit to how far the (a,b)-[c]␅ form can take itself onto such heights. As c is the nth true physical limit to (〽️,0-0)-[0]␅, it's safe to say that we'll exhaust the third input once we get to a number such as (〽️,0-0)-[(〽️,0-0)-[(〽️,0-0)-[(〽️,0-0)-[...]␅]␅]␅]␅ (with endless␅ extensions). Remember how I said that I had to put parentheses around 1␅ for (1␅)␅ and (1␅)
␅
? Well, it's due to something I'll get to in the aftermath part of this because this is taking me a while to compile, so...
The ␅␅
[
]
TO BE CONTINUED...